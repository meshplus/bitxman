package ethereum

import (
	"bytes"
	"context"
	"crypto/ecdsa"
	"encoding/json"
	"fmt"
	"github.com/meshplus/bitxhub-kit/hexutil"
	"io/ioutil"
	"reflect"
	"strings"
	"time"

	"github.com/Rican7/retry"
	"github.com/Rican7/retry/strategy"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/accounts/keystore"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/urfave/cli/v2"
)

const (
	ethKey  = "23b598ef6201f621074c8b41a25e75f55d756e8ce9d54bff0b4d0a6a738c2c46"
	kovan   = "https://kovan.infura.io/v3/cc512c8c74c94938aef1c833e1b50b9a"
	ropsten = "https://ropsten.infura.io/v3/cc512c8c74c94938aef1c833e1b50b9a"
	rinkeby = "https://rinkeby.infura.io/v3/cc512c8c74c94938aef1c833e1b50b9a"

	transferContract = "{\"Abi\":[\"[{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"destChainID\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"destAddr\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"funcs\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"args\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"argsCb\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"argsRb\\\",\\\"type\\\":\\\"string\\\"}],\\\"name\\\":\\\"emitInterchainEvent\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"}]\",\"[{\\\"inputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"}],\\\"name\\\":\\\"getBalance\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint64\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint64\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"getBroker\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"uint64\\\",\\\"name\\\":\\\"val\\\",\\\"type\\\":\\\"uint64\\\"}],\\\"name\\\":\\\"interchainCharge\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"uint64\\\",\\\"name\\\":\\\"val\\\",\\\"type\\\":\\\"uint64\\\"}],\\\"name\\\":\\\"interchainRollback\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"self\\\",\\\"type\\\":\\\"string\\\"}],\\\"name\\\":\\\"parseInt\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"_ret\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"pure\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"id\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"uint64\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"uint64\\\"}],\\\"name\\\":\\\"setBalance\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"newBroker\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"setBroker\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"destChainID\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"destAddr\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"sender\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"receiver\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"amount\\\",\\\"type\\\":\\\"string\\\"}],\\\"name\\\":\\\"transfer\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"}]\"],\"Bins\":[\"0x\",\"0x6080604052600180546001600160a01b03199081167397135d4d2578dd2347ff5382db77553be50bff3f1791829055600280549091166001600160a01b039290921691909117905534801561005357600080fd5b50610fc4806100636000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063bf0d02131161005b578063bf0d021314610366578063d1314ee01461038c578063e01b3517146103b0578063eea028f6146104f957610088565b80633a51d2461461008d5780633b1f68ff1461014e57806342346c5e146102005780634687ca34146102b6575b600080fd5b610131600480360360208110156100a357600080fd5b810190602081018135600160201b8111156100bd57600080fd5b8201836020820111156100cf57600080fd5b803590602001918460018302840111600160201b831117156100f057600080fd5b91908080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092955061073c945050505050565b6040805167ffffffffffffffff9092168252519081900360200190f35b6101fe6004803603604081101561016457600080fd5b810190602081018135600160201b81111561017e57600080fd5b82018360208201111561019057600080fd5b803590602001918460018302840111600160201b831117156101b157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903567ffffffffffffffff1691506107ad9050565b005b6102a46004803603602081101561021657600080fd5b810190602081018135600160201b81111561023057600080fd5b82018360208201111561024257600080fd5b803590602001918460018302840111600160201b8311171561026357600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610832945050505050565b60408051918252519081900360200190f35b6101fe600480360360408110156102cc57600080fd5b810190602081018135600160201b8111156102e657600080fd5b8201836020820111156102f857600080fd5b803590602001918460018302840111600160201b8311171561031957600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903567ffffffffffffffff1691506108c19050565b6101fe6004803603602081101561037c57600080fd5b50356001600160a01b03166109aa565b6103946109d6565b604080516001600160a01b039092168252519081900360200190f35b6104e5600480360360608110156103c657600080fd5b810190602081018135600160201b8111156103e057600080fd5b8201836020820111156103f257600080fd5b803590602001918460018302840111600160201b8311171561041357600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561046557600080fd5b82018360208201111561047757600080fd5b803590602001918460018302840111600160201b8311171561049857600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295505050903567ffffffffffffffff1691506109e59050565b604080519115158252519081900360200190f35b6101fe600480360360a081101561050f57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561053957600080fd5b82018360208201111561054b57600080fd5b803590602001918460018302840111600160201b8311171561056c57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156105be57600080fd5b8201836020820111156105d057600080fd5b803590602001918460018302840111600160201b831117156105f157600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b81111561064357600080fd5b82018360208201111561065557600080fd5b803590602001918460018302840111600160201b8311171561067657600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295949360208101935035915050600160201b8111156106c857600080fd5b8201836020820111156106da57600080fd5b803590602001918460018302840111600160201b831117156106fb57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ad7945050505050565b600080826040518082805190602001908083835b6020831061076f5780518252601f199092019160209182019101610750565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205467ffffffffffffffff16949350505050565b806000836040518082805190602001908083835b602083106107e05780518252601f1990920191602091820191016107c1565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805467ffffffffffffffff191667ffffffffffffffff949094169390931790925550505050565b80516000908290600190600019015b82518110156108b957603083828151811061085857fe5b016020015160f81c108015906108825750603983828151811061087757fe5b016020015160f81c11155b61088857fe5b81603084838151811061089757fe5b016020015160f81c0360ff16029390930192600a919091029060001901610841565b505050919050565b6001546001600160a01b03163314610920576040805162461bcd60e51b815260206004820152601a60248201527f496e766f6b657220617265206e6f74207468652042726f6b6572000000000000604482015290519081900360640190fd5b806000836040518082805190602001908083835b602083106109535780518252601f199092019160209182019101610934565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805467ffffffffffffffff19811667ffffffffffffffff91821695909501169390931790925550505050565b600180546001600160a01b039092166001600160a01b0319928316811790915560028054909216179055565b6001546001600160a01b031690565b6001546000906001600160a01b03163314610a47576040805162461bcd60e51b815260206004820152601a60248201527f496e766f6b657220617265206e6f74207468652042726f6b6572000000000000604482015290519081900360640190fd5b816000846040518082805190602001908083835b60208310610a7a5780518252601f199092019160209182019101610a5b565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805467ffffffffffffffff19811667ffffffffffffffff91821695909501169390931790925550600195945050505050565b6000610ae282610832565b90508067ffffffffffffffff166000856040518082805190602001908083835b60208310610b215780518252601f199092019160209182019101610b02565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092205467ffffffffffffffff1692909210159150610b69905057600080fd5b806000856040518082805190602001908083835b60208310610b9c5780518252601f199092019160209182019101610b7d565b51815160209384036101000a60001901801990921691161790529201948552506040519384900301909220805467ffffffffffffffff19811667ffffffffffffffff9182169590950316939093179092555060609050610c25610bfe86610e66565b610c20604051806040016040528060018152602001600b60fa1b815250610e66565b610e8b565b9050610c3c610c3382610e66565b610c2086610e66565b9050610c4a610bfe82610e66565b9050610c61610c5882610e66565b610c2085610e66565b90506060610c71610bfe87610e66565b9050610c7f610c3382610e66565b6002546040516328585c8160e11b81526001600160a01b038b81166004830190815260c0602484019081528c5160c48501528c5195965091909316936350b0b902938d938d93899389939260448101916064820191608481019160a482019160e4019060208b019080838360005b83811015610d05578181015183820152602001610ced565b50505050905090810190601f168015610d325780820380516001836020036101000a031916815260200191505b5086810385526024815260200180610f6b60249139604001868103845288818151815260200191508051906020019080838360005b83811015610d7f578181015183820152602001610d67565b50505050905090810190601f168015610dac5780820380516001836020036101000a031916815260200191505b50868103835260008152602001602001868103825287818151815260200191508051906020019080838360005b83811015610df1578181015183820152602001610dd9565b50505050905090810190601f168015610e1e5780820380516001836020036101000a031916815260200191505b509950505050505050505050600060405180830381600087803b158015610e4457600080fd5b505af1158015610e58573d6000803e3d6000fd5b505050505050505050505050565b610e6e610f50565b506040805180820190915281518152602082810190820152919050565b8051825160609182910167ffffffffffffffff81118015610eab57600080fd5b506040519080825280601f01601f191660200182016040528015610ed6576020820181803683370190505b5090506000602082019050610ef48186602001518760000151610f12565b845160208501518551610f0a9284019190610f12565b509392505050565b5b60208110610f32578151835260209283019290910190601f1901610f13565b905182516020929092036101000a6000190180199091169116179052565b60405180604001604052806000815260200160008152509056fe696e746572636861696e4368617267652c2c696e746572636861696e526f6c6c6261636ba26469706673582212205ac15305c07bb605fdfa89aec8886f3865d71bda268090ad1967036b7c1091f364736f6c63430006090033\"],\"Types\":[\"solidity/transfer.sol:Broker\",\"solidity/transfer.sol:Transfer\"]}\n"
	brokerContract   = "{\"Abi\":[\"[{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"status\\\",\\\"type\\\":\\\"bool\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"data\\\",\\\"type\\\":\\\"string\\\"}],\\\"name\\\":\\\"LogInterchainData\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"status\\\",\\\"type\\\":\\\"bool\\\"}],\\\"name\\\":\\\"LogInterchainStatus\\\",\\\"type\\\":\\\"event\\\"},{\\\"anonymous\\\":false,\\\"inputs\\\":[{\\\"indexed\\\":false,\\\"internalType\\\":\\\"uint64\\\",\\\"name\\\":\\\"index\\\",\\\"type\\\":\\\"uint64\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"fid\\\",\\\"type\\\":\\\"address\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"tid\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"funcs\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"args\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"argscb\\\",\\\"type\\\":\\\"string\\\"},{\\\"indexed\\\":false,\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"argsrb\\\",\\\"type\\\":\\\"string\\\"}],\\\"name\\\":\\\"throwEvent\\\",\\\"type\\\":\\\"event\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"addr\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"int64\\\",\\\"name\\\":\\\"status\\\",\\\"type\\\":\\\"int64\\\"}],\\\"name\\\":\\\"audit\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"bool\\\"}],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"destChainID\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"destAddr\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"funcs\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"args\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"argscb\\\",\\\"type\\\":\\\"string\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"argsrb\\\",\\\"type\\\":\\\"string\\\"}],\\\"name\\\":\\\"emitInterchainEvent\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"getCallbackMeta\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"uint64[]\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint64[]\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"from\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint64\\\",\\\"name\\\":\\\"idx\\\",\\\"type\\\":\\\"uint64\\\"}],\\\"name\\\":\\\"getInMessage\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"getInnerMeta\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"uint64[]\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint64[]\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"to\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint64\\\",\\\"name\\\":\\\"idx\\\",\\\"type\\\":\\\"uint64\\\"}],\\\"name\\\":\\\"getOutMessage\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"uint256\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint256\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"getOuterMeta\\\",\\\"outputs\\\":[{\\\"internalType\\\":\\\"address[]\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"address[]\\\"},{\\\"internalType\\\":\\\"uint64[]\\\",\\\"name\\\":\\\"\\\",\\\"type\\\":\\\"uint64[]\\\"}],\\\"stateMutability\\\":\\\"view\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[],\\\"name\\\":\\\"initialize\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"srcChainID\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint64\\\",\\\"name\\\":\\\"index\\\",\\\"type\\\":\\\"uint64\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"req\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"string\\\",\\\"name\\\":\\\"err\\\",\\\"type\\\":\\\"string\\\"}],\\\"name\\\":\\\"invokeIndexUpdateWithError\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"srcChainID\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"uint64\\\",\\\"name\\\":\\\"index\\\",\\\"type\\\":\\\"uint64\\\"},{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"destAddr\\\",\\\"type\\\":\\\"address\\\"},{\\\"internalType\\\":\\\"bool\\\",\\\"name\\\":\\\"req\\\",\\\"type\\\":\\\"bool\\\"},{\\\"internalType\\\":\\\"bytes\\\",\\\"name\\\":\\\"bizCallData\\\",\\\"type\\\":\\\"bytes\\\"}],\\\"name\\\":\\\"invokeInterchain\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"payable\\\",\\\"type\\\":\\\"function\\\"},{\\\"inputs\\\":[{\\\"internalType\\\":\\\"address\\\",\\\"name\\\":\\\"addr\\\",\\\"type\\\":\\\"address\\\"}],\\\"name\\\":\\\"register\\\",\\\"outputs\\\":[],\\\"stateMutability\\\":\\\"nonpayable\\\",\\\"type\\\":\\\"function\\\"}]\"],\"Bins\":[\"\"],\"Types\":[\"solidity/broker.sol:Broker\"]}\n"
)

var contractCMD = &cli.Command{
	Name:  "contract",
	Usage: "operation about solidity contract",
	Subcommands: []*cli.Command{
		{
			Name:  "deploy",
			Usage: "deploy solidity contract to ethereum chain",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:     "network",
					Usage:    "the network of ethereum chain(kovan, ropsten and rinkeby)",
					Value:    kovan,
					Required: false,
				},
				&cli.StringFlag{
					Name:     "key",
					Usage:    "the ethereum account private key",
					Required: false,
				},
				&cli.StringFlag{
					Name:     "contract",
					Usage:    "the broker or transfer of solidity contract",
					Value:    "broker",
					Required: true,
				},
			},
			Action: deploy,
		},
		{
			Name:  "invoke",
			Usage: "invoke solidity contract on ethereum chain",
			Flags: []cli.Flag{
				&cli.StringFlag{
					Name:     "network",
					Usage:    "the network of ethereum chain(kovan, ropsten and rinkeby)",
					Value:    kovan,
					Required: false,
				},
				&cli.StringFlag{
					Name:     "key",
					Usage:    "the ethereum account private key",
					Required: false,
				},
				&cli.StringFlag{
					Name:     "contract",
					Usage:    "the broker or transfer of solidity contract",
					Value:    "broker",
					Required: true,
				},
			},
			Action: invoke,
		},
	},
}

func deploy(ctx *cli.Context) error {
	var etherAddr string
	host := ctx.String("network")
	key := ctx.String("key")
	contract := ctx.String("contract")

	switch host {
	case "kovan":
		etherAddr = kovan
	case "ropsten":
		etherAddr = ropsten
	case "rinkeby":
		etherAddr = rinkeby
	default:
		return fmt.Errorf("unsupport ethereum network")
	}

	if key == "" {
		key = ethKey
	}

	etherCli, privateKey, err := helperEthKey(etherAddr, key)
	if err != nil {
		return err
	}

	var compileResult *CompileResult
	// compile solidity first
	if contract == "transfer" {
		err := json.Unmarshal([]byte(transferContract), &compileResult)
		if err != nil {
			return err
		}
	} else {
		err := json.Unmarshal([]byte(brokerContract), &compileResult)
		if err != nil {
			return err
		}
	}

	if len(compileResult.Abi) == 0 || len(compileResult.Bins) == 0 || len(compileResult.Types) == 0 {
		return fmt.Errorf("empty contract")
	}
	// deploy a contract
	auth := bind.NewKeyedTransactor(privateKey)
	for i, bin := range compileResult.Bins {
		if bin == "0x" {
			continue
		}
		parsed, err := abi.JSON(strings.NewReader(compileResult.Abi[i]))
		if err != nil {
			return err
		}

		code := strings.TrimPrefix(strings.TrimSpace(bin), "0x")
		addr, tx, _, err := bind.DeployContract(auth, parsed, common.FromHex(code), etherCli)
		if err != nil {
			return err
		}
		var r *types.Receipt
		if err := retry.Retry(func(attempt uint) error {
			r, err = etherCli.TransactionReceipt(context.Background(), tx.Hash())
			if err != nil {
				return err
			}

			return nil
		}, strategy.Wait(1*time.Second)); err != nil {
			return err
		}

		if r.Status == types.ReceiptStatusFailed {
			return fmt.Errorf("deploy contract failed, tx hash is: %s", r.TxHash.Hex())
		}

		fmt.Printf("\n======= %s =======\n", compileResult.Types[i])
		fmt.Printf("Deployed contract address is %s\n", addr.Hex())
		fmt.Printf("Contract JSON ABI\n%s\n", compileResult.Abi[i])
	}

	return nil
}

func invoke(ctx *cli.Context) error {
	var etherAddr string
	host := ctx.String("network")
	key := ctx.String("key")
	contract := ctx.String("contract")

	switch host {
	case "kovan":
		etherAddr = kovan
	case "ropsten":
		etherAddr = ropsten
	case "rinkeby":
		etherAddr = rinkeby
	default:
		return fmt.Errorf("unsupport ethereum network")
	}
	if ctx.NArg() < 2 {
		return fmt.Errorf("invoke contract must include address and function")
	}

	if key == "" {
		key = ethKey
	}

	args := ctx.Args().Slice()
	if ctx.NArg() == 2 {
		args = append(args, "")
	}
	dstAddr := args[0]
	function := args[1]
	argAbi := args[2]

	etherCli, privateKey, err := helperEthKey(etherAddr, key)
	if err != nil {
		return err
	}

	var compileResult *CompileResult
	// compile solidity first
	if contract == "transfer" {
		err := json.Unmarshal([]byte(transferContract), &compileResult)
		if err != nil {
			return err
		}
	} else {
		err := json.Unmarshal([]byte(brokerContract), &compileResult)
		if err != nil {
			return err
		}
	}

	idx := len(compileResult.Abi) - 1
	ab, err := abi.JSON(bytes.NewReader([]byte(compileResult.Abi[idx])))
	if err != nil {
		return err
	}

	etherSession := &EtherSession{
		privateKey: privateKey,
		etherCli:   etherCli,
		ctx:        context.Background(),
		ab:         ab,
	}

	// prepare for invoke parameters
	var argx []interface{}
	if len(argAbi) != 0 {
		argSplits := strings.Split(argAbi, ",")
		var argArr [][]byte
		for _, arg := range argSplits {
			argArr = append(argArr, []byte(arg))
		}

		argx, err = ABIUnmarshal(ab, argArr, function)
		if err != nil {
			return err
		}
	}

	packed, err := ab.Pack(function, argx...)
	if err != nil {
		return err
	}

	invokerAddr := crypto.PubkeyToAddress(privateKey.PublicKey)
	to := common.HexToAddress(dstAddr)

	if ab.Methods[function].IsConstant() {
		// for read only eth calls
		result, err := etherSession.ethCall(&invokerAddr, &to, function, packed)
		if err != nil {
			return err
		}

		if result == nil {
			fmt.Printf("\n======= invoke function %s =======\n", function)
			fmt.Println("no result")
			return nil
		}

		str := ""
		for _, r := range result {
			if r != nil {
				if reflect.TypeOf(r).String() == "[32]uint8" {
					v, ok := r.([32]byte)
					if ok {
						r = string(v[:])
					}
				}
			}
			str = fmt.Sprintf("%s,%v", str, r)
		}

		str = strings.Trim(str, ",")
		fmt.Printf("\n======= invoke function %s =======\n", function)
		fmt.Printf("call result: %s\n", str)
		return nil
	}

	// for write only eth transaction
	signedTx, err := etherSession.ethTx(&invokerAddr, &to, packed)
	if err != nil {
		return err
	}

	fmt.Printf("\n======= invoke function %s =======\n", function)
	fmt.Printf("\n=============== Transaction hash is ==============\n%s\n", signedTx.Hash().Hex())
	return nil
}

func helper(etherAddr, keyPath string) (*ethclient.Client, *ecdsa.PrivateKey, error) {
	etherCli, err := ethclient.Dial(etherAddr)
	if err != nil {
		return nil, nil, err
	}

	keyByte, err := ioutil.ReadFile(keyPath)
	if err != nil {
		return nil, nil, err
	}
	unlockedKey, err := keystore.DecryptKey(keyByte, "")
	if err != nil {
		return nil, nil, err
	}

	return etherCli, unlockedKey.PrivateKey, nil
}

func helperEthKey(etherAddr, key string) (*ethclient.Client, *ecdsa.PrivateKey, error) {
	etherCli, err := ethclient.Dial(etherAddr)
	if err != nil {
		return nil, nil, err
	}

	privKey, err := crypto.ToECDSA(hexutil.Decode(key))
	if err != nil {
		return nil, nil, err
	}

	return etherCli, privKey, nil
}
